# Adapted from: https://github.com/badboy/mdbook-mermaid/blob/main/.github/workflows/deploy.yml
name: Deploy
on:
  push:
    tags: ["*"]

env:
  CRATE_NAME: ella-cli
  BIN_NAME: ella

jobs:
  release_build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: x86_64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}
      - name: Setup musl
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt install -y musl-tools
      - name: Setup Windows
        if: matrix.os == 'windows-latest'
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: cargo build --release --target ${{ matrix.target }} -p ${{ env.CRATE_NAME }}
      - name: Get tag name
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
        id: extract_tag
      - name: Prepare artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          mkdir target/stage
          cd target/${{ matrix.target }}/release
          strip ${{ env.BIN_NAME }}.exe
          7z a ../../stage/${{ env.BIN_NAME }}-${{ steps.extract_tag.outputs.tag }}-${{ matrix.name }} ${{ env.BIN_NAME }}.exe
          cd -
      - name: Prepare artifacts [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          mkdir target/stage
          cd target/${{ matrix.target }}/release
          strip ${{ env.BIN_NAME }}
          tar czvf ../../stage/${{ env.BIN_NAME }}-${{ steps.extract_tag.outputs.tag }}-${{ matrix.name }} ${{ env.BIN_NAME }}
          cd -
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BIN_NAME }}-${{ steps.extract_tag.outputs.tag }}-${{ matrix.name }}
          path: target/stage/*
  release_publish:
    name: Create GitHub Release
    needs: release_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Build | Publish
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BIN_NAME }}-*/${{ env.BIN_NAME }}-*
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
